{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","win","onClick","value","MovesHistory","isAscending","moves","reversed","reverse","Board","i","_this","this","squares","key","includes","rows","row","cols","col","push","renderSquare","React","Component","Game","_this2","Object","_Users_Sanne_web_dev_2019_tic_tac_toe_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_Sanne_web_dev_2019_tic_tac_toe_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_Sanne_web_dev_2019_tic_tac_toe_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","location","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","_this3","current","winner","map","move","Math","floor","desc","jumpTo","player","handleClick","line","toggleMoves","lines","_lines$i","_Users_Sanne_web_dev_2019_tic_tac_toe_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fb297c6.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Controlled component. Their state is kept in a parent.\n// Turned into a functional component, since only a render method and no own state.\nfunction Square(props) {\n    return (\n        <button\n            className={\"square\" + (props.win ? \" win\" : \"\")}\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n// 4. Order moves as well as the list number\nfunction MovesHistory(props) {\n    return (\n        props.isAscending ?\n            <ol>{props.moves}</ol> :\n            <ol reversed>{props.moves.reverse()}</ol>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                key={i}\n                win={this.props.win && this.props.win.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        // Extra idea 3. \n        // Rewrite Board to use two loops to make the squares instead of hardcoding them.\n        const dimension = 3;\n        const rows = [];\n        for (let row = 0; row < dimension; row++) {\n            const cols = [];\n            for (let col = 0; col < dimension; col++) {\n                cols.push(this.renderSquare(dimension * row + col));\n            }\n            rows.push(<div className=\"board-row\" key={row}>{cols}</div>);\n        }\n\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Save all move states in history\n            history: [{\n                // Squares states \n                squares: Array(9).fill(null),\n                // 1. Square number clicked for (col, row)\n                location: null,\n            }],\n            // 4. Toggle moves order\n            isAscending: true,\n            stepNumber: 0,\n            // Alternate between players X & O\n            xIsNext: true,\n        }\n    }\n\n    // Square clicks\n    // Adds player X or 0 and updates history \n    handleClick(i) {\n        // If went back in time, this is where the board state will be altered \n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        // Copy the squares for immutability \n        const squares = current.squares.slice();\n        // Return early if already clicked or someone won\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        // Mark the clicked square\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        // Update state \n        this.setState({\n            // Concat arrays instead of push for immutability\n            history: history.concat([{\n                squares: squares,\n                location: i,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    // History list clicks to go back in time\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            // X is next after all even moves\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    // 4. Toggle moves order\n    toggleMoves() {\n        this.setState({\n            isAscending: !this.state.isAscending,\n        })\n    }\n\n    render() {\n        // Every time state is updated, this will be called\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        // map((object w/ squares & location, index)) \n        const moves = history.map((step, move) => {\n            // Extra idea 1:\n            // Display the location for each move in the format (col, row) in the move history list.\n            const location = step.location;\n            const col = location % 3;\n            const row = Math.floor(location / 3);\n            const desc = move ?\n                `Go to move #${move} (${col}, ${row})` :\n                'Go to game start';\n            return (\n                // Move index can be used as key, since the list items wont be re-ordered, deleted or inserted in the middle\n                <li key={move}>\n                    <button\n                        // Extra idea 2:\n                        // Bold the currently selected item in the move list. \n                        className={(move === this.state.stepNumber) ? \"current\" : \"\"}\n                        onClick={() => this.jumpTo(move)}\n                    >\n                        {desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = `Winner: ${winner.player} â€“ Nicely done!`;\n            // Extra idea 6:\n            // When no one wins, display a message about the result being a draw.\n        } else if (this.state.stepNumber === 9) {\n            status = 'It\\'s a draw! Well played.';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <h1>Tic Tac Toe</h1>\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        win={winner && winner.line}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"status\">{status}</div>\n                    {/* Extra idea 4:\n                        Add a toggle button that lets you sort the moves in either ascending or descending order. */}\n                    <button className=\"sort\"\n                        onClick={() => this.toggleMoves()}\n                    >\n                        Sort {this.state.isAscending ? 'descending' : 'ascending'}\n                        <span className=\"arrows\">&lt;&gt;</span>\n                    </button>\n                    <MovesHistory\n                        isAscending={this.state.isAscending}\n                        moves={moves}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// ========================================\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                player: squares[a],\n                line: lines[i]\n            };\n        }\n    }\n    return;\n}\n\n\n// ========================================\n\n/* \n    Extra idea 1: \n    Display the location for each move in the format (col, row) in the move history list.\n    -- Added location (square number) to history state\n    -- Calculating (col, row) in Game render method\n\n    Extra idea 2:\n    Bold the currently selected item in the move list. \n    -- Added class current in css with font-weight bold\n    -- Added className current to the list item with the same index as stepNumber\n\n    Extra idea 3:\n    Rewrite Board to use two loops to make the squares instead of hardcoding them.\n    -- Rendering squares with two loops in Board render method \n    -- Added key property to Square \n\n    Extra idea 4:\n    Add a toggle button that lets you sort the moves in either ascending or descending order.\n    -- Added toggle button in Game render method\n    -- Implemented function to toggle the added state isAscending \n    -- Created a MovesHistory functional component to toggle moves order \n\n    Extra idea 5:\n    When someone wins, highlight the three squares that caused the win.\n    -- Returning an object with the winner & the winning line from calculateWinner \n    -- Added class win in css for the highlight effect\n    -- Adding the win class to the winning squares\n\n    Extra idea 6:\n    When no one wins, display a message about the result being a draw.\n    -- Added conditional to the status in Game render method\n*/\n\n// ==============================================\n//   https://reactjs.org/tutorial/tutorial.html \n// =============================================="],"sourceRoot":""}